<?php

/**
 * Inputfield Textarea Markup
 * 
 * Intended for outputting markup as help or commentary among other inputfields,
 * mainly in Page Edit context. Loosely based on InputfieldMarkup from core, but
 * extends textarea to allow overriding markup on a per page basis by superuser.
 * 
 * @copyright Copyright (c) 2014-2019, Teppo Koivula
 * @license http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License, version 2
 */
class InputfieldTextareaMarkup extends InputfieldTextarea {

    /**
     * Return basic module info
     *
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title' => __('Textarea Markup', __FILE__),
            'summary' => __('May contain markup, plain text and optionally values from other fields.', __FILE__),
            'version' => 111,
        );
    }

    /**
     * Init module (set default values)
     *
     */
    public function init() {
        $this->set('defaultValue', '');
        $this->set('skipFieldLabel', 0);
        $this->set('textformatters', array());
        parent::init();
    }

    /**
     * Prevent non-superusers from editing Textarea Markup fields and reset
     * page-specific field value if it matches defaultValue in field settings.
     * 
     * @param WireInputData $input
     */
    public function ___processInput(WireInputData $input) {
        parent::___processInput($input);
        $page = $this->process->getPage();
        if ($this->attr('value') != $page->{$this->name} && !$this->user->isSuperuser()) {
            $this->attr('value', $page->{$this->name});
        } else if ($page->{$this->name} === $this->defaultValue) {
            $this->attr('value', '');
        }
    }

    /**
     * Render field value and/or markup from inputfield settings, with possible
     * placeholders ({{field_name}}) replaced by values from other page fields.
     *
     * @return string rendered output
     */
    public function ___render($page = null) {

        $this->skipLabel = $this->skipFieldLabel;

        $value = $this->attr('value') ? $this->attr('value') : $this->defaultValue;
        $out = $value;

        $page = null;
        if ($this->process == "ProcessPageEdit") {
            $page = $this->process->getPage();
        }

        $out = $this->parseString($out, $page);

        if (count($this->textformatters)) {
            foreach ($this->textformatters as $textformatter) {
                $t = wire('modules')->get($textformatter);
                if ($t) $t->formatValue(wire('page'), new Field(), $out);
            }
        }

        if ($page && $this->user->isSuperuser()) {
            $done = $this->_('Done');
            $edit = $this->_('Edit');
            $note = $this->_('Please note that visible value won\'t be updated until you save the page.');
            $out = "<a class='textarea-markup-edit' href='#' data-done='{$done}' data-edit='{$edit}'><i class='fa fa-edit'></i> <span>{$edit}</span></a>"
                 . "<div>{$out}</div>"
                 . "<textarea class='textarea-markup-edit' rows='4' name='{$this->name}'>{$value}</textarea>"
                 . "<p class='textarea-markup-edit notes'>{$note}</p>";
        } else {
            $out .= "<textarea class='textarea-markup-edit' name='{$this->name}'>" . $this->attr('value') . "</textarea>";
        }

        return $out;
    }

    /**
     * Render value of this field; same as ___render().
     *
     * @return string rendered output
     */
    public function ___renderValue() {
        return $this->render();
    }

    /**
     * Convert placeholders in a string to actual values
     *
     * Note that providing this method with a Page object is not strictly
     * speaking required: some placeholders can be parsed without it too.
     *
     * @param string $str
     * @param Page|null $page
     * @return string
     */
    public function parseString($str = '', $page = null) {
        if (strpos($str, "{{") !== false && strpos($str, "}}") !== false) {
            preg_match_all('#{{(.*?)}}#i', $str, $matches);
            if (!empty($matches)) {
                foreach ($matches[1] as $key => $field_name) {
                    if (substr($field_name, 0, 10) == "strtotime:") {
                        $field_value = substr($field_name, 10);
                        if (strpos($field_value, "|") !== false) {
                            list($field_value, $field_value_format) = explode("|", $field_value);
                            $field_value = date($field_value_format, strtotime($field_value));
                        } else {
                            $field_value = strtotime($field_value);
                        }
                        if ($field_value) {
                            $field_value = $this->sanitizer->text($field_value);
                            $str = str_replace($matches[0][$key], $field_value, $str);
                        }
                    } else if ($page && $page instanceof Page) {
                        $field_value = $page->get($field_name);
                        if ($field_value || $page->template->hasField($field_name)) {
                            if (is_array($field_value)) {
                                $field_value = implode(", ", array_filter($field_value));
                            }
                            $field_value = $this->sanitizer->text($field_value);
                            $str = str_replace($matches[0][$key], $field_value, $str);
                        }
                    }
                }
            }
        }
        return $str;
    }

    /**
     * Get inputfields for config
     *
     * @return InputfieldWrapper
     */
    public function ___getConfigInputfields() {

        $inputfields = parent::___getConfigInputfields();
        $inputfields->remove($inputfields->get('placeholder'));
        $inputfields->remove($inputfields->get('stripTags'));
        $inputfields->remove($inputfields->get('rows'));

        $field = wire('modules')->get('InputfieldTextarea');
        $field->attr('id+name', 'defaultValue'); 
        $field->attr('value', $this->defaultValue);
        $field->attr('rows', 10);
        $field->notes = $this->_('You can use {{field_name}} to output value of field_name field of current page.');
        $field->label = $this->_('Default value');
        $inputfields->add($field);

        $field = wire('modules')->get('InputfieldCheckbox');
        $field->attr('id+name', 'skipFieldLabel');
        $field->attr('value', Inputfield::skipLabelHeader);
        $field->label = $this->_('Skip label for this field');
        if ($this->skipFieldLabel) $field->attr('checked', 'checked');
        $inputfields->add($field);

        return $inputfields;
    }

}
